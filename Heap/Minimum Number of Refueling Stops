class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        int stops = 0; // Stops ki shuruaat 0 se kariye.
        int dist = 0; // Car ka distance, shuruwat mein 0.
        int i = 0; // Loop ke liye ek counter.
        int fuel = startFuel; // Car ki shuruwat ki fuel.

        // Ek priority queue banaiye, jismein pair of integers hain. Pahla integer fuel aur doosra distance.
        priority_queue<pair<int,int>> pq;

        // Jab tak loop chalta hai
        while(true){
            // Gas stations tak check kijiye
            while(i < stations.size()){
                // Agar gas station car ke reach mein hai
                if(stations[i][0] <= dist + fuel){
                    // Us gas station ka fuel aur distance priority queue mein daaliye.
                    pq.push({stations[i][1], stations[i][0]});
                } else
                    break;
                i++;
            }

            // Car ki distance update kijiye, jab woh full fuel ke saath travel karti hai.
            dist += fuel;
            // Fuel ko 0 kar dijiye, kyun ki ab car full fuel ke saath travel kar rahi hai.
            fuel = 0;

            // Agar car destination tak pahunch gayi hai, toh loop ko break kijiye.
            if(dist >= target) break;

            // Agar koi gas station nahi bacha hai, aur destination tak pahunch nahi sakte, toh -1 return kijiye.
            if(pq.empty()){
                stops = -1;
                break;
            }

            // Agla gas station ka fuel aur distance priority queue se pop kijiye.
            auto top = pq.top();
            // Car ko refuel kijiye, aur distance aur fuel ko adjust kijiye.
            fuel = (dist - top.second) + top.first;
            dist = top.second;
            pq.pop(); // Pop kiya gaya gas station.
            stops++; // Refueling stops count kijiye.
        }

        // Stops count return kijiye.
        return stops;
    }